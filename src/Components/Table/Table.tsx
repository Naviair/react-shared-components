import React, { useEffect, useState } from 'react';
import { TableProps } from 'antd/lib/table';
import { DownloadOutlined } from '@ant-design/icons';
import { Locale } from 'antd/lib/locale-provider';
import { TableFilter, TFilter } from './TableFilter';
import './styles.scss';
import { Button, ConfigProvider, Divider, message, Table as AntdTable } from 'antd';

export interface ITableProps<T> extends Omit<TableProps<T>, 'dataSource'> {
	/* Overwrite Antd Data source, as it is only readonly. Set table data */
	dataSource: T[];
	/* Render autogenerated filter, based on dataSource. */
	filter?: boolean;
	/* Set the language of the table. */
	language?: Locale;
	/* Set mobile mode */
	mobile?: boolean;
	/* Set the name of the table */
	tableName?: string;
	/* Download click handler */
	onDownloadClick?: () => Promise<void>;
}

/**
 * ## Table
 * @example <Table pagination={false} columns={someCol} data={someData} tableName={'EXAMPLE_DATA'}></Table>
 * @returns a table component
 */

// eslint-disable-next-line @typescript-eslint/naming-convention
export const Table = <T extends { _id?: string; name?: string; type?: string | number }>(props: ITableProps<T>): JSX.Element => {
	const [downloadLoadingState, setDownloadLoadingState] = useState(false);
	const [getType, setType] = useState<string[]>();
	const [getFilteredData, setFilteredData] = useState<T[]>();
	const [getFilterState, setFilterState] = useState<TFilter[]>([]);

	/**
	 * Listen for type changes
	 */
	useEffect(() => {
		handleFilteredState(props.dataSource);
	}, [getType, props.dataSource]);

	/**
	 * ## handleDownload
	 * onClick action handler for download button on specific Table.
	 * Download button will only appear if @param props.onDownloadClick is set.
	 */
	const handleDownload = () => {
		setDownloadLoadingState(true);
		props
			.onDownloadClick?.()
			.catch((err) => {
				message.error(err);
			})
			.finally(() => setDownloadLoadingState(false));
	};

	/**
	 * Map data to types for filter in top
	 */
	useEffect(() => {
		const values: TFilter[] = [{ key: '*', count: 0, translation: 'Alle' }];
		props.dataSource.forEach((value) => {
			if (value.type !== undefined) {
				values[0].count += 1;
				const curIndex = values.findIndex((obj) => obj.key === value.type);
				if (curIndex > -1) {
					values[curIndex].count += 1;
				} else {
					values.push({ key: String(value.type), count: 1, translation: String(value.type) });
				}
			}
		});
		setFilterState(values);
	}, [props.dataSource]);

	/**
	 * ## handleFilteredState
	 * Listen for active filters, and set table data to be displayed.
	 * @param dataSource The type T[] dataSource to be processed
	 */
	const handleFilteredState = (dataSource: T[]) => {
		if (getType === undefined || getType.includes('*')) {
			setFilteredData(dataSource);
		} else {
			setFilteredData(dataSource.filter((item) => getType.includes(String(item.type))));
		}
	};
	return (
		<>
			<div className={'scTableHeader'}>
				<div className={'scTableSection scTableLeft'}>{props.filter && <TableFilter filters={getFilterState} onActiveChange={setType} />}</div>
				<div className={'scTableSection scTableRight'}>
					{props.onDownloadClick && (
						<div className={'scTableRight'}>
							<Button onClick={handleDownload} loading={downloadLoadingState} icon={<DownloadOutlined />} type={'primary'}>
								{'Download'}
							</Button>
						</div>
					)}
				</div>
			</div>
			{(props.onDownloadClick || props.filter) && <Divider />}
			<div className={'scTable'}>
				<h2 className={'scTableName'}>{props.tableName && props.tableName}</h2>
				<ConfigProvider locale={props.language}>
					<AntdTable {...props} dataSource={props.filter ? getFilteredData : props.dataSource} />
				</ConfigProvider>
			</div>
		</>
	);
};
